#!/usr/bin/env bash

echo ""
echo "--------------------------------------------------------------------------------"
echo "   TASMANIAN INSTALL SCRIPT"
echo "--------------------------------------------------------------------------------"
echo ""

bShowHelp=0
if (( ${#@} > 0 )); then
    if [[ $1 == *"help" ]]; then
        bShowHelp=1
    fi
fi

if (( $bShowHelp == 1 )); then
    echo "Usage: ./install <install path> <matlab work folder> <optinos>"
    echo ""
    echo "       <install path>: optional"
    echo "                       the install prefix"
    echo "                       passed on -D CMAKE_INSTALL_PREFIX"
    echo "                       if missing, the script will ask for a folder"
    echo ""
    echo " <matlab work folder>: optional"
    echo "                       work folder for the matlab interface"
    echo "                       if missing, the MATLAB interface will not be installed"
    echo ""
    echo "            <options>: optionally can overwrite default features"
    echo ""
    echo "        -cmake=<path>: specify path to cmake, if not in the default path"
    echo "     -compiler=<path>: C++ compiler to use in cmake"
    echo "                       e.g., -compiler=/usr/bin/clang-5.0"
    echo "       -python=<path>: provide a path to the python interpreter"
    echo "                       e.g., -python=/usr/bin/python3"
    echo "                -cuda: enable Nvidia CUDA support"
    echo "                       automatically search for CUDA installation"
    echo "         -cuda=<path>: enable Nvidia CUDA support and specify the path to nvcc"
    echo "                       e.g., -cuda=/usr/local/cuda-9.1/bin/nvcc"
    echo "          -hip=<path>: enable AMD ROCm support and specify the path to hipcc"
    echo "                       e.g., -hip=/opt/rocm/bin/hipcc"
    echo "               -magma: enable UTK MAGMA support"
    echo "                       automatically search for MAGMA installation"
    echo "        -magma=<path>: enable UTK MAGMA support and specify path for MAGMA"
    echo "                       e.g., -magma=/usr/local/magma/"
    echo "             -fortran: enable Fortran interface"
    echo "      -fortran=<path>: enable Fortran interface and specify Fortran compiler"
    echo "                       e.g., -fortran=/usr/bin/gfortran-6"
    echo "                 -mpi: enable MPI support (automatic search)"
    echo "          -mpi=<path>: enable MPI and specify the MPI CXX compiler"
    echo "                       e.g., -mpi=/usr/bin/mpicxx"
    echo "            -noshared: do not build shared libraries"
    echo "            -nostatic: do not build static libraries"
    echo "              -notest: do not execute any of the tests"
    echo "               -debug: build with Debug flags"
    echo "           -noinstall: skip the make install command, compile only"
    echo ""
    echo "  if the build process fails or you want to reset, just delete ./Build"
    exit 0
fi

########################################################################
# Check if we are in the correct folder
########################################################################
sProperFolder=1
sPWD=`pwd`
if [ ! -d "$sPWD/SparseGrids/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/DREAM/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/Testing/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/Config/" ]; then
    sProperFolder=0
fi
if [ ! -d "$sPWD/InterfacePython/" ]; then
    sProperFolder=0
fi

if (( $sProperFolder == 0 )); then
    echo ""
    echo "ERROR: must run ./install inside the Tasmanian source folder"
    echo ""
    exit 1;
fi

########################################################################
# process options,
# Development options: -make-j calls make -j
#                      -nobashrc calls skips the .bashrc section
########################################################################
sCmake="cmake"
sCXXcompiler=""
sPythonInterpreter=""
sEnableCUDA="OFF"
sEnableHIP="OFF"
sRocmRootDir=""
sCudaRootDir=""
sEnableMAGMA="OFF"
sMagmaRootDir=""
sEnableMPI="OFF"
sMPICXXCompiler=""
sEnableFortran="OFF"
sFortranCompiler=""
sBuildSharedLibs=""
sMakeCommand="make"
bEnableTests=1
sBuildType="Release"
bVerbose=0
bSkilBashrc=0
bInstall=1

for sOption in "$@"; do
    if [[ $sOption == "-cmake="* ]]; then
        sCmake="${sOption:7}"
    elif [[ $sOption == "-compiler="* ]]; then
        sCXXcompiler="-D CMAKE_CXX_COMPILER=${sOption:10}"
    elif [[ $sOption == "-python="* ]]; then
        sManualPythonInterp="-D PYTHON_EXECUTABLE=${sOption:8}"
    elif [[ $sOption == "-cuda" ]]; then
        sEnableCUDA="ON"
    elif [[ $sOption == "-cuda="* ]]; then
        sEnableCUDA="ON"
        sCudaCompiler="-D CMAKE_CUDA_COMPILER=${sOption:6}"
    elif [[ $sOption == "-hip="* ]]; then
        sEnableHIP="ON"
        sCXXcompiler="-D CMAKE_CXX_COMPILER=${sOption:5}"
    elif [[ $sOption == "-magma" ]]; then
        sEnableMAGMA="ON"
    elif [[ $sOption == "-magma="* ]]; then
        sEnableMAGMA="ON"
        sMagmaRootDir="-D Tasmanian_MAGMA_ROOT=${sOption:7}"
    elif [[ $sOption == "-fortran" ]]; then
        sEnableFortran="ON"
    elif [[ $sOption == "-fortran="* ]]; then
        sEnableFortran="ON"
        sFortranCompiler="-D CMAKE_Fortran_COMPILER=${sOption:9}"
    elif [[ $sOption == "-mpi" ]]; then
        sEnableMPI="ON"
    elif [[ $sOption == "-mpi="* ]]; then
        sEnableMPI="ON"
        sMPICXXCompiler="-D MPI_CXX_COMPILER=${sOption:5}"
    elif [[ $sOption == "-noshared" ]]; then
        if [[ ! -z $sBuildSharedLibs ]]; then
            echo "ERROR: only one -noshared or -nostatic can appear in the command line"
            exit 1;
        fi
        sBuildSharedLibs="-D BUILD_SHARED_LIBS:BOOL=OFF"
    elif [[ $sOption == "-nostatic" ]]; then
        if [[ ! -z $sBuildSharedLibs ]]; then
            echo "ERROR: only one -noshared or -nostatic can appear in the command line"
            exit 1;
        fi
        sBuildSharedLibs="-D BUILD_SHARED_LIBS:BOOL=ON"
    elif [[ $sOption == "-make-j" ]]; then
        sMakeCommand="make -j"
    elif [[ $sOption == "-notest" ]]; then
        bEnableTests=0
    elif [[ $sOption == "-debug" ]]; then
        sBuildType="Debug"
    elif [[ $sOption == "-verbose" ]]; then
        bVerbose=1
    elif [[ $sOption == "-nobashrc" ]]; then
        bSkilBashrc=1
    elif [[ $sOption == "-noinstall" ]]; then
        bInstall=0
    elif [[ $sOption == "-"* ]]; then
        echo "ERROR: unrecognized options $sOption"
        exit 1;
    fi
done

echo "Looking for cmake ..."
"$sCmake" --version || { echo "ERROR: Could not find cmake command, please use option -cmake=<cmake full path>"; exit 1; }

echo ""
echo ""

########################################################################
# set install path and matlab folder
########################################################################
bInstallPrefix=1
if (( ${#@} < 1 )); then
    bInstallPrefix=0
elif [[ $1 == "-"* ]]; then
    bInstallPrefix=0
fi

# if there is no install prefix or no second input
# or the second input starts with -
# then matlab work folder has not been provided
bMatlabWork=1
if (( $bInstallPrefix == 0 )); then
    bMatlabWork=0
elif (( ${#@} < 2 )); then
    bMatlabWork=0
elif [[ $2 == "-"* ]]; then
    bMatlabWork=0
fi

sInstallPrefix=""
if (( $bInstallPrefix == 0 )); then
    echo "Enter path to install Tasmanian"
    read -p "install path: " sInstallPrefix
else
    sInstallPrefix=$1
fi

sMatlabWork=""
if (( $bMatlabWork == 0 )); then
    if (( $bInstallPrefix == 0 )); then
        echo "Enter path for MATLAB work file (leave empty to disable MATLAB)"
        read -p "matlab work path: " sMatlabWork
    fi
else
    sMatlabWork=$2
fi

echo ""

# cmake seems to handle relative paths as relative to the build folder
# the user is likely to interpret relative paths to the location of the install script
# thus we create the folder here and convert the folder to absolute path
if [[ ! -z "$sMatlabWork" ]]; then
    mkdir -p "$sMatlabWork"
    if [ ! $? == 0 ]; then
        echo "ERROR: could not create folder $sMatlabWork"
        exit 1;
    fi
    # ensure absolute path in $sMatlabWork
    sPWD=`pwd`
    cd "$sMatlabWork"
    sMatlabWork=`pwd`
    cd "$sPWD"
fi


#######################################
# final pre-Build setup message
#######################################
echo ""
echo "Installing Tasmanian with options:"
echo "   install path: $sInstallPrefix"

echo "     cmake: $sCmake"
if [[ ! -z $sCXXcompiler ]]; then
    echo "  $sCXXcompiler"
fi
if [[ ! -z $sMatlabWork ]]; then
    echo "   matlab work folder: $sMatlabWork"
fi
if [[ ! -z $sManualPythonInterp ]]; then
    echo "  $sManualPythonInterp"
fi
if [[ $sEnableCUDA == "ON" ]]; then
    echo "     -cuda: enable Nvidia CUDA support"
fi
if [[ $sEnableHIP == "ON" ]]; then
    echo "      -hip: enable AMD ROCm support"
fi
if [[ ! -z $sCudaCompiler ]]; then
    echo "  $sCudaCompiler"
fi
if [[ $sEnableFortran == "ON" ]]; then
    echo "  -fortran: enable Fortran"
fi
if [[ ! -z $sFortranCompiler ]]; then
    echo "  $sFortranCompiler"
fi
if [[ $sEnableMPI == "ON" ]]; then
    echo "      -mpi: enable Fortran"
fi
if [[ ! -z $sMPICXXCompiler ]]; then
    echo "  $sMPICXXCompiler"
fi
if [[ $sBuildSharedLibs == "-D BUILD_SHARED_LIBS:BOOL=OFF" ]]; then
    echo " -noshared: do not build shared libraries"
fi
if [[ $sBuildSharedLibs == "-D BUILD_SHARED_LIBS:BOOL=ON" ]]; then
    echo " -nostatic: do not build static libraries"
fi
if [[ $sBuildType == "Debug" ]]; then
    echo "    -debug: build with Debug flags"
fi
if (( $bEnableTests == 0 )); then
    echo "   -notest: do not execute any of the tests"
fi

echo ""

if (( $bInstallPrefix == 0 )); then
    read -p "proceed with installation: (y/N) " sCreate
    if [[ -z $sCreate ]]; then
        sCreate="n"
    fi
    if [[ $sCreate == "y" ]] || [[ $sCreate == "Y" ]] || [[ $sCreate == "Yes" ]] || [[ $sCreate == "yes" ]]; then
        echo "Configuring..."
    else
        echo "Canceled!"
        exit 0;
    fi
else
    echo "Configuring..."
fi

echo ""

#######################################
# here we go!
#######################################
if [[ ! "$sInstallPrefix" == "/"* ]] && [[ ! "$sInstallPrefix" == "~/"* ]]; then # reinterpret relative paths
    sInstallPrefix=`pwd`/"$sInstallPrefix"
fi

if (( $bVerbose == 1 )); then
    set -x
fi

mkdir -p Build

cd Build || { echo "ERROR: Could not create or enter the Build folder"; exit 1; }

if [[ ! -z $sMatlabWork ]]; then
    sMatlabWork="-D Tasmanian_MATLAB_WORK_FOLDER:PATH=$sMatlabWork"
fi

$sCmake \
  -D CMAKE_BUILD_TYPE=$sBuildType \
  -D CMAKE_INSTALL_PREFIX="$sInstallPrefix" \
  $sBuildSharedLibs \
  $sCXXcompiler \
  -D Tasmanian_ENABLE_RECOMMENDED:BOOL=ON \
  $sManualPythonInterp \
  -D Tasmanian_ENABLE_CUDA:BOOL=$sEnableCUDA \
  -D Tasmanian_ENABLE_HIP:BOOL=$sEnableHIP \
  $sCudaCompiler \
  -D Tasmanian_ENABLE_MAGMA:BOOL=$sEnableMAGMA \
  $sMagmaRootDir \
  -D Tasmanian_ENABLE_FORTRAN:BOOL=$sEnableFortran \
  $sFortranCompiler \
  -D Tasmanian_ENABLE_MPI:BOOL=$sEnableMPI \
  $sMPICXXCompiler \
  $sMatlabWork \
  ../

if [ ! $? == 0 ]; then
    echo "ERROR: could not execute the cmake build command!"
    exit 1;
fi

$sMakeCommand

if [ ! $? == 0 ]; then
    echo "ERROR: could not execute the 'make' command!"
    exit 1;
fi

bFailedTests=0
if (( $bEnableTests == 1 )); then
    make test || { echo "ERROR: the 'make test command' failed!"; bFailedTests=1; }
fi

if (( $bInstall == 0 )); then
    echo ""
    echo "Build successful!"
    echo ""
    echo "Skipping installation due to the -noisntall switch"
    echo ""
    exit 0;
fi

make install

if [ ! $? == 0 ]; then
    echo "ERROR: the 'make install' command failed!"
    exit 1;
fi

if (( $bEnableTests == 1 )); then
    make test_install || { echo "ERROR: the post install test failed!"; bFailedTests=1; }
fi

# write out the build log
set -x
cat "$sInstallPrefix/share/Tasmanian/Tasmanian.log"
# if you get here, it means things went well

#######################################
# post install, edit .bashrc
#######################################
set +x
if (( $bSkilBashrc == 0 )); then
# check if $sInstallPrefix is absolute or relative
    cd "$sInstallPrefix"/share/Tasmanian/
    if [ ! $? -eq 0 ] || [ ! -f ./TasmanianENVsetup.sh ]; then
        echo "Very odd! There were no previous errors but cannot find $sInstallPrefix/share/Tasmanian/TasmanianENVsetup.sh"
        echo "This must be a bug!"
        echo "At any rate, cannot automatically edit .bashrc, thus exiting"
        echo ""
        exit 1;
    fi
    sConfigPath=`pwd`

    echo ""
    echo ""
    echo "Using the executable and shared library requires the following command:"
    echo ""
    echo "source $sConfigPath/TasmanianENVsetup.sh"
    echo ""
    read -p "Append the command to ~/.bashrc? (y/N)" sAppend
    if [[ $sAppend == "y" ]] || [[ $sAppend == "Y" ]] || [[ $sAppend == "Yes" ]] || [[ $sAppend == "yes" ]]; then
        echo "source \"$sConfigPath\"/TasmanianENVsetup.sh" >> ~/.bashrc
    fi
fi

if (( $bFailedTests == 1 )); then
    echo ""
    echo ""
    echo "WARNING: some of the tests failed!"
    echo "         This could be just a fluke in the seed of the random number"
    echo "         generator used by both Sparse Grids and DREAM testers."
    echo "         It could also be a problem with random thread scheduling"
    echo "         in the addon module, particularly likely on slower machines."
    echo "         This could also indicate a problem with the installation."
    echo "         try testing with different seed."
    echo "         From the Build folder:"
    echo "             ./SparseGrids/gridtest random"
    echo "             ./DREAM/dreamtest random"
    echo "             ./Addons/addontester"
    exit 1;
fi

echo ""
echo "--------------------------------------------------------------------------------"
echo "   TASMANIAN INSTALL COMPLETED SUCCESSFULLY"
echo "--------------------------------------------------------------------------------"
echo ""

exit 0;
